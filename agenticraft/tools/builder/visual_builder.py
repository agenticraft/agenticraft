"""Visual Workflow Builder for AgentiCraft.

Simplified visual builder focusing on hero workflows with drag-and-drop interface
and Python code export capability.
"""

from typing import Dict, List, Any, Optional
from dataclasses import dataclass, field
from enum import Enum
import json
import uuid

@dataclass
class Position:
    """Position in the visual canvas."""
    x: float
    y: float

class ComponentType(Enum):
    """Types of components in visual builder."""
    INPUT = "input"
    AGENT = "agent"
    WORKFLOW = "workflow"
    OUTPUT = "output"
    CONFIG = "config"

class HeroWorkflowType(Enum):
    """Available hero workflow types."""
    RESEARCH_TEAM = "research_team"
    CUSTOMER_SERVICE = "customer_service"
    CODE_REVIEW = "code_review"

@dataclass
class VisualComponent:
    """A visual component in the workflow."""
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    type: ComponentType = ComponentType.AGENT
    name: str = ""
    position: Position = field(default_factory=lambda: Position(0, 0))
    config: Dict[str, Any] = field(default_factory=dict)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for serialization."""
        return {
            "id": self.id,
            "type": self.type.value,
            "name": self.name,
            "position": {"x": self.position.x, "y": self.position.y},
            "config": self.config
        }

@dataclass 
class Connection:
    """Connection between components."""
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    source_id: str = ""
    target_id: str = ""
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary."""
        return {
            "id": self.id,
            "source_id": self.source_id,
            "target_id": self.target_id
        }

class WorkflowBuilder:
    """Visual workflow builder for AgentiCraft."""
    
    def __init__(self):
        self.components: Dict[str, VisualComponent] = {}
        self.connections: List[Connection] = []
        self.workflow_type: Optional[HeroWorkflowType] = None
        
    def add_component(self, component: VisualComponent) -> str:
        """Add a component to the workflow."""
        self.components[component.id] = component
        return component.id
        
    def connect(self, source_id: str, target_id: str) -> str:
        """Connect two components."""
        connection = Connection(source_id=source_id, target_id=target_id)
        self.connections.append(connection)
        return connection.id
        
    def remove_component(self, component_id: str):
        """Remove a component and its connections."""
        if component_id in self.components:
            del self.components[component_id]
            # Remove related connections
            self.connections = [
                c for c in self.connections 
                if c.source_id != component_id and c.target_id != component_id
            ]
            
    def export_to_python(self) -> str:
        """Export the visual workflow to Python code."""
        if self.workflow_type == HeroWorkflowType.RESEARCH_TEAM:
            return self._export_research_team()
        elif self.workflow_type == HeroWorkflowType.CUSTOMER_SERVICE:
            return self._export_customer_service()
        elif self.workflow_type == HeroWorkflowType.CODE_REVIEW:
            return self._export_code_review()
        else:
            return self._export_generic()
            
    def _export_research_team(self) -> str:
        """Export Research Team workflow."""
        # Find configuration
        config = self._get_workflow_config()
        
        code = '''"""Research Team Workflow - Generated by Visual Builder"""

import asyncio
from agenticraft.workflows import ResearchTeam

async def main():
    # Create research team
    team = ResearchTeam(
        size={size},
        model="{model}",
        name="{name}"
    )
    
    # Execute research
    report = await team.research(
        topic="{topic}",
        depth="{depth}",
        audience="{audience}"
    )
    
    # Output results
    print("Executive Summary:")
    print(report["executive_summary"])
    print("\\nKey Findings:")
    for finding in report["key_findings"]:
        print(f"- {{finding}}")

if __name__ == "__main__":
    asyncio.run(main())
'''.format(
            size=config.get("size", 5),
            model=config.get("model", "gpt-4"),
            name=config.get("name", "ResearchTeam"),
            topic=config.get("topic", "Enter your research topic"),
            depth=config.get("depth", "comprehensive"),
            audience=config.get("audience", "general")
        )
        return code
        
    def _export_customer_service(self) -> str:
        """Export Customer Service workflow."""
        config = self._get_workflow_config()
        
        code = '''"""Customer Service Desk - Generated by Visual Builder"""

import asyncio
from agenticraft.workflows import CustomerServiceDesk

async def main():
    # Create customer service desk
    desk = CustomerServiceDesk(
        routing_strategy="{routing}",
        escalation_enabled={escalation},
        model="{model}"
    )
    
    # Handle customer inquiry
    response = await desk.handle_inquiry(
        message="{message}",
        customer_id="{customer_id}",
        priority="{priority}"
    )
    
    # Output results
    print(f"Response: {{response['response']}}")
    print(f"Handled by: {{response['agent']}}")
    if response.get("escalated"):
        print("Note: This inquiry was escalated")

if __name__ == "__main__":
    asyncio.run(main())
'''.format(
            routing=config.get("routing_strategy", "skills_based"),
            escalation=config.get("escalation_enabled", True),
            model=config.get("model", "gpt-4"),
            message=config.get("message", "Customer inquiry here"),
            customer_id=config.get("customer_id", "CUST123"),
            priority=config.get("priority", "normal")
        )
        return code
        
    def _export_code_review(self) -> str:
        """Export Code Review workflow."""
        config = self._get_workflow_config()
        
        code = '''"""Code Review Pipeline - Generated by Visual Builder"""

import asyncio
from agenticraft.workflows import CodeReviewPipeline

async def main():
    # Create code review pipeline
    pipeline = CodeReviewPipeline(
        review_depth="{depth}",
        include_security={security},
        include_performance={performance},
        model="{model}"
    )
    
    # Review code
    review = await pipeline.review_code(
        code="""{code}""",
        language="{language}",
        context="{context}"
    )
    
    # Output results
    print(f"Overall Score: {{review['overall_score']}}/10")
    print("\\nIssues Found:")
    for issue in review["issues"]:
        print(f"- [{{issue['severity']}}] {{issue['description']}}")
    print("\\nSuggestions:")
    for suggestion in review["suggestions"]:
        print(f"- {{suggestion}}")

if __name__ == "__main__":
    asyncio.run(main())
'''.format(
            depth=config.get("review_depth", "comprehensive"),
            security=config.get("include_security", True),
            performance=config.get("include_performance", True),
            model=config.get("model", "gpt-4"),
            code=config.get("code", "# Your code here"),
            language=config.get("language", "python"),
            context=config.get("context", "Code review context")
        )
        return code
        
    def _export_generic(self) -> str:
        """Export generic workflow."""
        return '''"""Custom Workflow - Generated by Visual Builder"""

import asyncio
from agenticraft import Agent, Workflow

async def main():
    # Create agents
    agents = []
'''
        
    def _get_workflow_config(self) -> Dict[str, Any]:
        """Extract configuration from visual components."""
        config = {}
        for component in self.components.values():
            if component.type == ComponentType.CONFIG:
                config.update(component.config)
        return config
        
    def save(self, filename: str):
        """Save workflow to JSON file."""
        data = {
            "workflow_type": self.workflow_type.value if self.workflow_type else None,
            "components": [c.to_dict() for c in self.components.values()],
            "connections": [c.to_dict() for c in self.connections]
        }
        with open(filename, 'w') as f:
            json.dump(data, f, indent=2)
            
    def load(self, filename: str):
        """Load workflow from JSON file."""
        with open(filename, 'r') as f:
            data = json.load(f)
            
        self.components.clear()
        self.connections.clear()
        
        if data.get("workflow_type"):
            self.workflow_type = HeroWorkflowType(data["workflow_type"])
            
        for comp_data in data.get("components", []):
            component = VisualComponent(
                id=comp_data["id"],
                type=ComponentType(comp_data["type"]),
                name=comp_data["name"],
                position=Position(comp_data["position"]["x"], comp_data["position"]["y"]),
                config=comp_data["config"]
            )
            self.components[component.id] = component
            
        for conn_data in data.get("connections", []):
            connection = Connection(
                id=conn_data["id"],
                source_id=conn_data["source_id"],
                target_id=conn_data["target_id"]
            )
            self.connections.append(connection)


class HeroWorkflowTemplates:
    """Pre-built templates for hero workflows."""
    
    @staticmethod
    def create_research_team_template() -> WorkflowBuilder:
        """Create a Research Team template."""
        builder = WorkflowBuilder()
        builder.workflow_type = HeroWorkflowType.RESEARCH_TEAM
        
        # Input
        input_comp = VisualComponent(
            type=ComponentType.INPUT,
            name="Research Topic",
            position=Position(100, 200),
            config={"placeholder": "Enter research topic"}
        )
        builder.add_component(input_comp)
        
        # Configuration
        config = VisualComponent(
            type=ComponentType.CONFIG,
            name="Team Config",
            position=Position(100, 100),
            config={
                "size": 5,
                "model": "gpt-4",
                "depth": "comprehensive",
                "audience": "general"
            }
        )
        builder.add_component(config)
        
        # Research Team workflow
        team = VisualComponent(
            type=ComponentType.WORKFLOW,
            name="Research Team",
            position=Position(400, 200),
            config={"type": "research_team"}
        )
        builder.add_component(team)
        
        # Agents
        researcher = VisualComponent(
            type=ComponentType.AGENT,
            name="Web Researcher",
            position=Position(300, 100),
            config={"role": "researcher"}
        )
        builder.add_component(researcher)
        
        analyst = VisualComponent(
            type=ComponentType.AGENT,
            name="Data Analyst",
            position=Position(300, 200),
            config={"role": "analyst"}
        )
        builder.add_component(analyst)
        
        writer = VisualComponent(
            type=ComponentType.AGENT,
            name="Technical Writer",
            position=Position(300, 300),
            config={"role": "writer"}
        )
        builder.add_component(writer)
        
        # Output
        output = VisualComponent(
            type=ComponentType.OUTPUT,
            name="Research Report",
            position=Position(700, 200),
            config={"format": "markdown"}
        )
        builder.add_component(output)
        
        # Connect components
        builder.connect(input_comp.id, team.id)
        builder.connect(researcher.id, team.id)
        builder.connect(analyst.id, team.id)
        builder.connect(writer.id, team.id)
        builder.connect(team.id, output.id)
        
        return builder
        
    @staticmethod
    def create_customer_service_template() -> WorkflowBuilder:
        """Create a Customer Service template."""
        builder = WorkflowBuilder()
        builder.workflow_type = HeroWorkflowType.CUSTOMER_SERVICE
        
        # Customer input
        input_comp = VisualComponent(
            type=ComponentType.INPUT,
            name="Customer Inquiry",
            position=Position(100, 200),
            config={"placeholder": "Customer message"}
        )
        builder.add_component(input_comp)
        
        # Configuration
        config = VisualComponent(
            type=ComponentType.CONFIG,
            name="Desk Config",
            position=Position(100, 100),
            config={
                "routing_strategy": "skills_based",
                "escalation_enabled": True,
                "model": "gpt-4"
            }
        )
        builder.add_component(config)
        
        # Customer Service workflow
        desk = VisualComponent(
            type=ComponentType.WORKFLOW,
            name="Service Desk",
            position=Position(400, 200),
            config={"type": "customer_service"}
        )
        builder.add_component(desk)
        
        # Support agents
        general = VisualComponent(
            type=ComponentType.AGENT,
            name="General Support",
            position=Position(300, 100),
            config={"specialty": "general"}
        )
        builder.add_component(general)
        
        technical = VisualComponent(
            type=ComponentType.AGENT,
            name="Technical Support",
            position=Position(300, 200),
            config={"specialty": "technical"}
        )
        builder.add_component(technical)
        
        billing = VisualComponent(
            type=ComponentType.AGENT,
            name="Billing Support",
            position=Position(300, 300),
            config={"specialty": "billing"}
        )
        builder.add_component(billing)
        
        # Output
        output = VisualComponent(
            type=ComponentType.OUTPUT,
            name="Support Response",
            position=Position(700, 200),
            config={"format": "chat"}
        )
        builder.add_component(output)
        
        # Connect
        builder.connect(input_comp.id, desk.id)
        builder.connect(general.id, desk.id)
        builder.connect(technical.id, desk.id)
        builder.connect(billing.id, desk.id)
        builder.connect(desk.id, output.id)
        
        return builder
        
    @staticmethod
    def create_code_review_template() -> WorkflowBuilder:
        """Create a Code Review template."""
        builder = WorkflowBuilder()
        builder.workflow_type = HeroWorkflowType.CODE_REVIEW
        
        # Code input
        input_comp = VisualComponent(
            type=ComponentType.INPUT,
            name="Code to Review",
            position=Position(100, 200),
            config={"placeholder": "Paste code here"}
        )
        builder.add_component(input_comp)
        
        # Configuration
        config = VisualComponent(
            type=ComponentType.CONFIG,
            name="Review Config",
            position=Position(100, 100),
            config={
                "review_depth": "comprehensive",
                "include_security": True,
                "include_performance": True,
                "language": "python"
            }
        )
        builder.add_component(config)
        
        # Code Review workflow
        pipeline = VisualComponent(
            type=ComponentType.WORKFLOW,
            name="Review Pipeline",
            position=Position(400, 200),
            config={"type": "code_review"}
        )
        builder.add_component(pipeline)
        
        # Review agents
        security = VisualComponent(
            type=ComponentType.AGENT,
            name="Security Reviewer",
            position=Position(300, 100),
            config={"focus": "security"}
        )
        builder.add_component(security)
        
        performance = VisualComponent(
            type=ComponentType.AGENT,
            name="Performance Reviewer",
            position=Position(300, 200),
            config={"focus": "performance"}
        )
        builder.add_component(performance)
        
        quality = VisualComponent(
            type=ComponentType.AGENT,
            name="Code Quality Reviewer",
            position=Position(300, 300),
            config={"focus": "quality"}
        )
        builder.add_component(quality)
        
        # Output
        output = VisualComponent(
            type=ComponentType.OUTPUT,
            name="Review Report",
            position=Position(700, 200),
            config={"format": "markdown"}
        )
        builder.add_component(output)
        
        # Connect
        builder.connect(input_comp.id, pipeline.id)
        builder.connect(security.id, pipeline.id)
        builder.connect(performance.id, pipeline.id)
        builder.connect(quality.id, pipeline.id)
        builder.connect(pipeline.id, output.id)
        
        return builder
